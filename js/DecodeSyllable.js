/*jslint browser: true*/
/*global $, Hangul, renderSound, renderSpeech, insertPaths4Syllable, speak*/

// For Node.js environment in tests
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    isHangul: isHangul,
    char2syllable: char2syllable,
    code2syllable: code2syllable
  };
}

var HANGUL_OFFSET = 0xAC00,
    OPENING = [
        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',
        'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',
        'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ',
        'ㅍ', 'ㅎ'
    ],
    LASTING = [
        'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',
        'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ',
        'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',
        'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'
    ],
    CLOSING = [
        '', 'ㄱ', 'ㄲ', ['ㄱ','ㅅ'], 'ㄴ', ['ㄴ','ㅈ'], ['ㄴ', 'ㅎ'], 'ㄷ', 'ㄹ',
        ['ㄹ', 'ㄱ'], ['ㄹ','ㅁ'], ['ㄹ','ㅂ'], ['ㄹ','ㅅ'], ['ㄹ','ㅌ'], ['ㄹ','ㅍ'], ['ㄹ','ㅎ'], 'ㅁ',
        'ㅂ', ['ㅂ','ㅅ'], 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'
    ];

function isHangul(c){
    return HANGUL_OFFSET <= c && c <= 0xd7a3;
}

function char2syllable(char) {
    var str = String.fromCharCode(char),
        result, charset = [], syllable = [];

    var code = char - HANGUL_OFFSET,
        closing = code % 28,
        lasting = Math.floor(code / 28) % 21,
        opening = Math.floor(code / 28 / 21);    

    if (isHangul(char)) {
        charset = " ㅣㆍㅡㅏㅓㅗㅜ  ㆎㅢㅐㅔㅚㅟ ㅣᆢᆜㅑㅕㅛㅠ  ㆎㅢㅒㅖㅚㅟ ㅣㆍㅡㅏㅓㅗㅜ  ㆎㅢㅐㅔㅚㅟ ㅣㆍㅡㅑㅕㅛㅠ  ㆎㅢㅒㅖㅚㅟ ㅣㆍㅡㅏㅓㅗㅜ  ㆎㅢㅐㅔㅚㅟ ㅣㆍㅡㅑㅕㅛㅠ  ㆎㅢㅒㅖㅚㅟ ㅣㆍㅡㅏㅓㅗㅜ  ㆎㅢㅐㅔㅚㅟ ㅣㆍㅡㅑㅕㅛㅠ   ㅢㅒㅖㅚㅟㅇㅁㅅㄴㆁㆆㅂㅈㄷㄱㅎㅍㅊㅌㅋㄹᅇퟠㅆㅥᇮㆆㅃㅉㄸㄲㅍㅊꥹㅋㆅᄙᅠᆼᆷᆺᆫᇰㆆㅂㅈㄷㄱㅎㅍㅊㅌㅋᆯㅇㅁㅅㄴㆁㆆㅂㅈㄷㄱㅍㅊㅌㅋㅎ"; // https://en.wikipedia.org/wiki/List_of_Hangul_jamo

        syllable.push(charset.indexOf(OPENING[opening]));
        syllable.push(charset.indexOf(LASTING[lasting]));
        syllable.push(charset.indexOf(CLOSING[closing]));
        if (syllable[2]) { syllable[2] = syllable[2] | 0x40; }        
    } else { // http://ko.charset.wikia.com/wiki/%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C_%EC%98%9B%ED%95%9C%EA%B8%80_1638750%EC%9E%90
        charset[0xee88] = [0x80, 0x02, 0x00];
        charset[0xe560] = [0x81, 0x02, 0x00];
        charset[0xe97d] = [0x82, 0x02, 0x00];
        charset[0xe56e] = [0x81, 0x02, 0xc1];
        charset[0xe98b] = [0x82, 0x02, 0xc1];
        charset[0xee93] = [0x83, 0x02, 0xc1];
        charset[0xee93] = [0x80, 0x02, 0xc1];
        charset[0xee97] = [0x80, 0x02, 0xc2];
        charset[0xe570] = [0x81, 0x02, 0xc2];
        charset[0xe991] = [0x82, 0x02, 0xc2];
        charset[0xe283] = [0x83, 0x02, 0x00];
        charset[0xe46c] = [0x8f, 0x02, 0x00];
        charset[0xf15c] = [0x84, 0x02, 0x00];
        charset[0xf154] = [0x84, 0x01, 0x00];
        charset[0xf149] = [0x84, 0x03, 0x00];
        charset[0xee8a] = [0x80, 0x02, 0xc3];
        charset[0xee8c] = [0x80, 0x02, 0xcf];
        charset[0xee9a] = [0x80, 0x02, 0xc4];
        charset[0xe285] = [0x83, 0x02, 0xc3];
        charset[0xe46e] = [0x8f, 0x02, 0xc3];
        charset[0xf15e] = [0x84, 0x02, 0xc3];
        charset[0xf155] = [0x84, 0x01, 0xc3];
        charset[0xf14b] = [0x84, 0x03, 0xc3];

        charset[0xe288] = [0x83, 0x02, 0xcf];
        charset[0xe470] = [0x8f, 0x02, 0xcf];
        charset[0xf160] = [0x84, 0x02, 0xcf];
        charset[0xf157] = [0x84, 0x01, 0xcf];
        charset[0xf14c] = [0x84, 0x03, 0xcf];

        charset[0xe296] = [0x83, 0x02, 0xc4];
        charset[0xe481] = [0x8f, 0x02, 0xc4];
        charset[0x114c] = [0x84, 0x02, 0xc4]; // ᅌᆞᇰ
        charset[0xe27a] = [0x83, 0x01, 0xc4];
        charset[0xe45d] = [0x8f, 0x01, 0xc4];
        charset[0xf15b] = [0x84, 0x01, 0xc4];
        charset[0xe26a] = [0x83, 0x03, 0xc4];
        charset[0xe454] = [0x8f, 0x03, 0xc4];
        charset[0xf151] = [0x84, 0x03, 0xc4];
        charset[0xee9a] = [0x80, 0x02, 0xc4];
        charset[0xee80] = [0x80, 0x01, 0xc4]; // 이ᇰ
        charset[0xee6b] = [0x80, 0x03, 0xc4]; // 으ᇰ
        charset[0xe285] = [0x83, 0x02, 0xc3]; // ㄴᆞㄴ
        charset[0xe46e] = [0x8f, 0x02, 0xc3]; // ㄹᆞㄴ
        charset[0xf15e] = [0x84, 0x02, 0xc3]; // ㄴᆞㄴ
        charset[0xf155] = [0x84, 0x01, 0xc3];
        charset[0xf14b] = [0x84, 0x03, 0xc3];
        charset[0xe288] = [0x83, 0x02, 0xcf]; // ㄴᆞㄴ
        charset[0xe470] = [0x8f, 0x02, 0xcf]; // ㄹᆞㄴ
        charset[0xf160] = [0x84, 0x02, 0xcf]; // ㄴᆞㄴ
        charset[0xf157] = [0x84, 0x01, 0xcf];
        charset[0xf14c] = [0x84, 0x03, 0xcf];

        // pictographic vowels
        charset[0x3163] = [0x00, 0x01, 0x00]; // ㅣ
        charset[0x318d] = [0x00, 0x02, 0x00]; // ㆍ
        charset[0x3161] = [0x00, 0x03, 0x00]; // ㅡ
        charset[0x314f] = [0x00, 0x04, 0x00]; // ㅏ
        charset[0x3153] = [0x00, 0x05, 0x00]; // ㅓ
        charset[0x3157] = [0x00, 0x06, 0x00]; // ㅗ
        charset[0x315c] = [0x00, 0x07, 0x00]; // ㅜ

        // post-iotized vowels
        charset[0x318e] = [0x00, 0x0a, 0x00]; // ㆎ
        charset[0x3162] = [0x00, 0x0b, 0x00]; // ㅢ
        charset[0x3150] = [0x00, 0x0c, 0x00]; // ㅐ
        charset[0x3154] = [0x00, 0x0d, 0x00]; // ㅔ
        charset[0x315a] = [0x00, 0x0e, 0x00]; // ㅚ
        charset[0x315f] = [0x00, 0x0f, 0x00]; // ㅟ

        // pre-iotized vowels
        charset[0x3151] = [0x00, 0x14, 0x00]; // ㅑ
        charset[0x3155] = [0x00, 0x15, 0x00]; // ㅕ
        charset[0x315b] = [0x00, 0x16, 0x00]; // ㅛ
        charset[0x3160] = [0x00, 0x17, 0x00]; // ㅠ
        charset[0x3152] = [0x00, 0x1c, 0x00]; // ㅒ
        charset[0x3156] = [0x00, 0x1d, 0x00]; // ㅖ
        charset[0x1188] = [0x00, 0x1e, 0x00]; // ᆈ
        charset[0x1194] = [0x00, 0x1f, 0x00]; // ᆔ

        // composite vowels
        charset[0x3158] = [0x00, 0x24, 0x00]; // ㅘ
        charset[0x315d] = [0x00, 0x25, 0x00]; // ㅝ
        charset[0x3159] = [0x00, 0x2c, 0x00]; // ㅙ
        charset[0x315e] = [0x00, 0x2d, 0x00]; // ㅞ
        charset[0x1184] = [0x00, 0x34, 0x00]; // ᆄ
        charset[0x1191] = [0x00, 0x35, 0x00]; // ᆑ
        charset[0x1185] = [0x00, 0x3c, 0x00]; // ᆅ
        charset[0x1192] = [0x00, 0x3d, 0x00]; // ᆒ

        // opening tense sounds
        charset[0x3180] = [0xa0, 0x00, 0x00]; // ㆀ
        charset[0x3141] = [0xa1, 0x00, 0x00]; // ㅁ
        charset[0x3146] = [0xa2, 0x00, 0x00]; // ㅆ
        charset[0x3165] = [0xa3, 0x00, 0x00]; // ㄴ
        charset[0x3181] = [0xa4, 0x00, 0x00]; // ㆁ
        charset[0xa97c] = [0xa5, 0x00, 0x00]; // ᅙᅙ
        charset[0x3143] = [0xa6, 0x00, 0x00]; // ㅃ
        charset[0x3149] = [0xa7, 0x00, 0x00]; // ㅉ
        charset[0x3138] = [0xa8, 0x00, 0x00]; // ㄸ
        charset[0x3132] = [0xa9, 0x00, 0x00]; // ㄲ
        charset[0x1158] = [0xaa, 0x00, 0x00]; // ᅘ
        charset[0x314d] = [0xab, 0x00, 0x00]; // ㅍ
        charset[0x314a] = [0xac, 0x00, 0x00]; // ㅊ
        charset[0x314c] = [0xad, 0x00, 0x00]; // ㅌ
        charset[0x314b] = [0xae, 0x00, 0x00]; // ㅋ
        charset[0x3139] = [0xaf, 0x00, 0x00]; // ㄹ

        // opening sounds
        charset[0x3147] = [0x80, 0x00, 0x00]; // ㅇ
        charset[0x3141] = [0x81, 0x00, 0x00]; // ㅁ
        charset[0x3145] = [0x82, 0x00, 0x00]; // ㅅ
        charset[0x3134] = [0x83, 0x00, 0x00]; // ㄴ
        charset[0x3181] = [0x84, 0x00, 0x00]; // ㆁ
        charset[0x1159] = [0x85, 0x00, 0x00]; // ᅙ
        charset[0x3142] = [0x86, 0x00, 0x00]; // ㅂ
        charset[0x3148] = [0x87, 0x00, 0x00]; // ㅈ
        charset[0x3137] = [0x88, 0x00, 0x00]; // ㄷ
        charset[0x3131] = [0x89, 0x00, 0x00]; // ㄱ
        charset[0x314e] = [0x8a, 0x00, 0x00]; // ㅎ
        charset[0x314d] = [0x8b, 0x00, 0x00]; // ㅍ
        charset[0x314a] = [0x8c, 0x00, 0x00]; // ㅊ
        charset[0x314c] = [0x8d, 0x00, 0x00]; // ㅌ
        charset[0x314b] = [0x8e, 0x00, 0x00]; // ㅋ
        charset[0x3139] = [0x8f, 0x00, 0x00]; // ㄹ

        // closing tense sounds
        charset[0x11bc] = [0x00, 0x00, 0xe0]; // ᆼ
        charset[0xd7e0] = [0x00, 0x00, 0xe1]; // ᆷᆷ
        charset[0x11bb] = [0x00, 0x00, 0xe2]; // ᆻ
        charset[0x11ff] = [0x00, 0x00, 0xe3]; // ᆫᆫ
        charset[0x11ee] = [0x00, 0x00, 0xe4]; // ᇰᇰᇮ
        charset[0x11f9] = [0x00, 0x00, 0xe5]; // ᇹ
        charset[0xd7e6] = [0x00, 0x00, 0xe6]; // ᆸᆸ
        charset[0xd7f9] = [0x00, 0x00, 0xe7]; // ᆽᆽ
        charset[0xd7cd] = [0x00, 0x00, 0xe8]; // ᆮᆮ
        charset[0x11a9] = [0x00, 0x00, 0xe9]; // ᆩ
        charset[0x11c2] = [0x00, 0x00, 0xea]; // ᇂ
        charset[0x11c1] = [0x00, 0x00, 0xeb]; // ᇁ
        charset[0x11be] = [0x00, 0x00, 0xec]; // ᆾ
        charset[0x11c0] = [0x00, 0x00, 0xed]; // ᇀ
        charset[0x11bf] = [0x00, 0x00, 0xee]; // ᆿ
        charset[0x11af] = [0x00, 0x00, 0xef]; // ᆯ

        // closing sounds
        charset[0x11bc] = [0x00, 0x00, 0xc0]; // ᆼ
        charset[0x11b7] = [0x00, 0x00, 0xc1]; // ᆷ
        charset[0x11ba] = [0x00, 0x00, 0xc2]; // ᆺ
        charset[0x11ab] = [0x00, 0x00, 0xc3]; // ᆫ
        charset[0x11f0] = [0x00, 0x00, 0xc4]; // ᇰ
        charset[0x11f9] = [0x00, 0x00, 0xc5]; // ᇹ
        charset[0x11b8] = [0x00, 0x00, 0xc6]; // ᆸ
        charset[0x11bd] = [0x00, 0x00, 0xc7]; // ᆽ
        charset[0x11ae] = [0x00, 0x00, 0xc8]; // ᆮ
        charset[0x11a8] = [0x00, 0x00, 0xc9]; // ᆨ
        charset[0x11c2] = [0x00, 0x00, 0xca]; // ᇂ
        charset[0x11c1] = [0x00, 0x00, 0xcb]; // ᇁ
        charset[0x11be] = [0x00, 0x00, 0xcc]; // ᆾ
        charset[0x11c0] = [0x00, 0x00, 0xcd]; // ᇀ
        charset[0x11bf] = [0x00, 0x00, 0xce]; // ᆿ
        charset[0x11af] = [0x00, 0x00, 0xcf]; // ᆯ

        syllable = charset[char];
    }
    return syllable;
}

var isIdleArticulation = true;

$(document).ready(function(){
    $(".syltab").click(function() {
        if (isIdleArticulation) {
            isIdleArticulation = false;
            var char = this.innerText.charCodeAt(0),
                hex = char.toString(16),
                innerText = this.innerText,
                syllable = char2syllable(char), 
                container = $(this).closest(".col-md-6"),
                img = (container.find(".articulatespeech"))[0],
                svg = (container.find(".letterformation"))[0];
            renderSound(syllable[0], syllable[1], syllable[2]);

            if (img !== null) { renderSpeech(img, syllable[0], syllable[1], syllable[2]); }
            if (svg !== null) { insertPaths4Syllable(svg, syllable[0], syllable[1], syllable[2]); }
            if (syllable[0] && syllable[1]) {
                var snd_name = 'sounds/sound';
                syllable.forEach(function (speech) {
                    var hex_name = speech.toString(16).padStart(2, '0');
                    snd_name = snd_name + hex_name;
                });
                snd_name = snd_name + '.ogg';

                setTimeout(function() {
                    speak(innerText);

                    var audio = new Audio(snd_name);
                    audio.play();
                }, 1500); // Delay 200ms. Otherwise, some syllalbes are broken.
            }
        }
    });
    $(".syltab").mouseenter(function() {
        //alert("asdf");    
    });
});

function code2syllable(char) {
    if (char < 0x80) { return [0x00, char, 0x00]; }
    if (char < 0xb0) { return [char, 0x00, 0x00]; }
    if (char <  256) { return [0x00, 0x00, char]; }
}

$(document).ready(function(){
    $(".articulate").click(function() {
        var char = parseInt((this.id).slice(-2),16),
            syllable = code2syllable(char),
            container = $(this).closest(".col-md-6"),
            svg = (container.find(".letterformation"))[0];
        renderSound(syllable[0], syllable[1], syllable[2]);
        renderSpeech(this, syllable[0], syllable[1], syllable[2]);
        if (svg !== null) { insertPaths4Syllable(svg, syllable[0], syllable[1], syllable[2]); }
    });
});